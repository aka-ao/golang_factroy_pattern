@startuml
namespace domain {
    class NormalUser << (S,Aquamarine) >> {
        + UserId int
        + UserName string

        + Pay(amount int) string

    }
    class PrimeUser << (S,Aquamarine) >> {
        + UserId int
        + UserName string

        + Pay(amount int) string

    }
    interface User  {
        + Pay(amount int) string

    }
}

"domain.User" <|-- "domain.NormalUser"
"domain.User" <|-- "domain.PrimeUser"

namespace dto {
    class UserDTO << (S,Aquamarine) >> {
        + UserID int
        + UserName string
        + Status int

    }
}


namespace repo {
    interface IUserRepository  {
        + All() ([]domain.User, error)

    }
    class UserRepositoryImpl << (S,Aquamarine) >> {
        + All() ([]domain.User, error)

    }
}

"repo.IUserRepository" <|-- "repo.UserRepositoryImpl"

namespace service {
    class UserService << (S,Aquamarine) >> {
        - repo repo.IUserRepository

        + All() ([]domain.User, error)

    }
}

"repo.IUserRepository" <|-- "service.UserService"

@enduml
